version: "3.9"

services:
  product-service:
    container_name: product
    build: .
    ports:
      - "8000:8000"
    environment:
      JWT_SECRET: ${JWT_SECRET}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      PORT: ${PORT}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
    depends_on:
      db:
        condition: service_healthy # Solo funciona en Docker Compose
    networks:
      - product-network

  db:
    container_name: product-postgres-db
    image: postgres:15-alpine
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    # EN CASO DE PERSISTENCIA DE DATOS
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - product-network

  # pgadmin:
  #   container_name: pgadmin
  #   image: dpage/pgadmin4:latest
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
  #   ports:
  #     - "8080:80" 
  #   depends_on:
  #     - db
  #   networks:
  #     - product-network

# EN CASO DE PERSISTENCIA DE DATOS
# volumes:
#   postgres_data:

networks:
  product-network:
